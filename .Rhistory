require(tidyverse)
require(TSAUMN)
require(markovchain)
require(TSA)
require(ggplot2)
knitr::opts_chunk$set(
tidy=TRUE,
size="small",
fig.align = "center" )
theme_set( theme_bw ( ) )
ens <- read.csv( url( "https://github.com/jrevenaugh/ESCI5201/raw/master/El%20Nino%20Sequence.csv" ) )
#Plot codes go here.
plot(ens$Year, ens$Strength, xlab = 'year' , ylab = 'elNino strength', main = 'bimodal elNino strength over time')
hist(ens$Strength, breaks = 2, xlab = 'elNino strength', main = 'elNino strength frequency comparison',  xaxp  = c(0, 1, 1))
#R code to compute percentage of "strong" El Ninos.
percentStrong = 100* (sum(ens$Strength))/(length(ens$Strength))
#Mean, median and standard deviation of interval time.
ensINT = ens$Interval[2:length(ens$Interval)]
meanINT = mean(ensINT)
medianINT = median(ensINT)
stdINT = sd(ensINT)
# Compute interval time mean and variance.
variance = (stdINT)^2
# R code create histogram of interval time.
hist(ens$Interval, xlab = 'interval, years', main = 'time between elNino events')
# Histogram with poisson prediction superposed.
lambda = meanINT
ml = max (ensINT)
P = data.frame(Events = 1:ml, P = length(ensINT) *dpois(1:ml, lambda))
ensINTdf = data.frame(Interval = c(ensINT))
ggplot(data = ensINTdf, aes(Interval))+
geom_histogram()+
geom_point(data = P, aes (x=Events, y=P))
# Scatterplot of adjacent interval times.
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN)
df = data.frame(shiftedIntervals = shiftedIntervals, ensINT = ensINT)
ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
# Interval time (observed and shifted) sequence.  The x axis should be index, not year.
intTS = ts(ensINT)
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN, NaN, NaN)
shiftTS = ts(shiftedIntervals)
#df = data.frame(shiftedIntervals = shiftTS, ensINT = intTS)
#ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
ts.plot(intTS, shiftTS,xlab = "index " ,ylab = 'interval', col = c('red','blue') )
# Compute observed transition frequency and probability matrices for El Nino severity index. Do not hand count!  Use R.  createSequenceMatrix will help tremendously {markovchain}.
P = createSequenceMatrix(ens$Strength , toRowProbs = TRUE )
# Expected transition probability matrix
markovStrength = new('markovchain', states = c('0','1'), transitionMatrix = P , name = 'Strength of El Nino')
pr = steadyStates(markovStrength)
#Chi-square test for null hypothesis
pM = t(matrix(rep(pr,2), nrow = 2))
xsq = chisq.test(x= as.vector(P), p= as.vector(pM), rescale.p = TRUE)
# Expected transition probability matrix
markovStrength = new('markovchain', states = c('0','1'), transitionMatrix = P , name = 'Strength of El Nino')
pr = steadyStates(markovStrength)
P
pr
pM
#Chi-square test for null hypothesis
pM = t(matrix(rep(pr,2), nrow = 2))
pM[1:] = pM [1:] * 100- (percentStrong)/100
pM[1:]
pM(1:)
#Chi-square test for null hypothesis
pM = t(matrix(rep(pr,2), nrow = 2))
pM[1:1,2] = pM [1:1:1,2] * 100- (percentStrong)/100
xsq = chisq.test(x= as.vector(P), p= as.vector(pM), rescale.p = TRUE)
pM
#Chi-square test for null hypothesis
pM = t(matrix(rep(pr,2), nrow = 2))
pM[1:1,2] = pM [1:1:1,2] *( 100- percentStrong)/100
xsq = chisq.test(x= as.vector(P), p= as.vector(pM), rescale.p = TRUE)
#Chi-square test for null hypothesis
pM = t(matrix(rep(pr,2), nrow = 2))
pM[1:1,2] = pM [1:1,2] *( 100- percentStrong)/100
pM[2:1,2] = pM [2:1,2] *percentStrong/100
xsq = chisq.test(x= as.vector(P), p= as.vector(pM), rescale.p = TRUE)
pM
#Chi-square test for null hypothesis
pM = t(matrix(rep(pr,2), nrow = 2))
pM[1,1:2] = pM [1,1:2] *( 100- percentStrong)/100
pM[2,1:2] = pM [2,1:2] *percentStrong/100
xsq = chisq.test(x= as.vector(P), p= as.vector(pM), rescale.p = TRUE)
pM
xsq
P
pM
require(tidyverse)
require(TSAUMN)
require(markovchain)
require(TSA)
require(ggplot2)
knitr::opts_chunk$set(
tidy=TRUE,
size="small",
fig.align = "center" )
theme_set( theme_bw ( ) )
ens <- read.csv( url( "https://github.com/jrevenaugh/ESCI5201/raw/master/El%20Nino%20Sequence.csv" ) )
#Plot codes go here.
plot(ens$Year, ens$Strength, xlab = 'year' , ylab = 'elNino strength', main = 'bimodal elNino strength over time')
hist(ens$Strength, breaks = 2, xlab = 'elNino strength', main = 'elNino strength frequency comparison',  xaxp  = c(0, 1, 1))
#R code to compute percentage of "strong" El Ninos.
percentStrong = 100* (sum(ens$Strength))/(length(ens$Strength))
#Mean, median and standard deviation of interval time.
ensINT = ens$Interval[2:length(ens$Interval)]
meanINT = mean(ensINT)
medianINT = median(ensINT)
stdINT = sd(ensINT)
# Compute interval time mean and variance.
variance = (stdINT)^2
# R code create histogram of interval time.
hist(ens$Interval, xlab = 'interval, years', main = 'time between elNino events')
# Histogram with poisson prediction superposed.
lambda = meanINT
ml = max (ensINT)
P = data.frame(Events = 1:ml, P = length(ensINT) *dpois(1:ml, lambda))
ensINTdf = data.frame(Interval = c(ensINT))
ggplot(data = ensINTdf, aes(Interval))+
geom_histogram()+
geom_point(data = P, aes (x=Events, y=P))
# Scatterplot of adjacent interval times.
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN)
df = data.frame(shiftedIntervals = shiftedIntervals, ensINT = ensINT)
ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
# Interval time (observed and shifted) sequence.  The x axis should be index, not year.
intTS = ts(ensINT)
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN, NaN, NaN)
shiftTS = ts(shiftedIntervals)
#df = data.frame(shiftedIntervals = shiftTS, ensINT = intTS)
#ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
ts.plot(intTS, shiftTS,xlab = "index " ,ylab = 'interval', col = c('red','blue') )
# Compute observed transition frequency and probability matrices for El Nino severity index. Do not hand count!  Use R.  createSequenceMatrix will help tremendously {markovchain}.
P = createSequenceMatrix(ens$Strength , toRowProbs = FALSE )
# Expected transition probability matrix
markovStrength = new('markovchain', states = c('0','1'), transitionMatrix = P , name = 'Strength of El Nino')
require(tidyverse)
require(TSAUMN)
require(markovchain)
require(TSA)
require(ggplot2)
knitr::opts_chunk$set(
tidy=TRUE,
size="small",
fig.align = "center" )
theme_set( theme_bw ( ) )
ens <- read.csv( url( "https://github.com/jrevenaugh/ESCI5201/raw/master/El%20Nino%20Sequence.csv" ) )
#Plot codes go here.
plot(ens$Year, ens$Strength, xlab = 'year' , ylab = 'elNino strength', main = 'bimodal elNino strength over time')
hist(ens$Strength, breaks = 2, xlab = 'elNino strength', main = 'elNino strength frequency comparison',  xaxp  = c(0, 1, 1))
#R code to compute percentage of "strong" El Ninos.
percentStrong = 100* (sum(ens$Strength))/(length(ens$Strength))
#Mean, median and standard deviation of interval time.
ensINT = ens$Interval[2:length(ens$Interval)]
meanINT = mean(ensINT)
medianINT = median(ensINT)
stdINT = sd(ensINT)
# Compute interval time mean and variance.
variance = (stdINT)^2
# R code create histogram of interval time.
hist(ens$Interval, xlab = 'interval, years', main = 'time between elNino events')
# Histogram with poisson prediction superposed.
lambda = meanINT
ml = max (ensINT)
P = data.frame(Events = 1:ml, P = length(ensINT) *dpois(1:ml, lambda))
ensINTdf = data.frame(Interval = c(ensINT))
ggplot(data = ensINTdf, aes(Interval))+
geom_histogram()+
geom_point(data = P, aes (x=Events, y=P))
# Scatterplot of adjacent interval times.
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN)
df = data.frame(shiftedIntervals = shiftedIntervals, ensINT = ensINT)
ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
# Interval time (observed and shifted) sequence.  The x axis should be index, not year.
intTS = ts(ensINT)
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN, NaN, NaN)
shiftTS = ts(shiftedIntervals)
#df = data.frame(shiftedIntervals = shiftTS, ensINT = intTS)
#ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
ts.plot(intTS, shiftTS,xlab = "index " ,ylab = 'interval', col = c('red','blue') )
# Compute observed transition frequency and probability matrices for El Nino severity index. Do not hand count!  Use R.  createSequenceMatrix will help tremendously {markovchain}.
P = createSequenceMatrix(ens$Strength , toRowProbs = FALSE )
# Expected transition probability matrix
Prob = createSequenceMatrix(ens$Strength , toRowProbs = TRUE )
markovStrength = new('markovchain', states = c('0','1'), transitionMatrix = Prob , name = 'Strength of El Nino')
pr = steadyStates(markovStrength)
xsq
require(tidyverse)
require(TSAUMN)
require(markovchain)
require(TSA)
require(ggplot2)
knitr::opts_chunk$set(
tidy=TRUE,
size="small",
fig.align = "center" )
theme_set( theme_bw ( ) )
ens <- read.csv( url( "https://github.com/jrevenaugh/ESCI5201/raw/master/El%20Nino%20Sequence.csv" ) )
#Plot codes go here.
plot(ens$Year, ens$Strength, xlab = 'year' , ylab = 'elNino strength', main = 'bimodal elNino strength over time')
hist(ens$Strength, breaks = 2, xlab = 'elNino strength', main = 'elNino strength frequency comparison',  xaxp  = c(0, 1, 1))
#R code to compute percentage of "strong" El Ninos.
percentStrong = 100* (sum(ens$Strength))/(length(ens$Strength))
#Mean, median and standard deviation of interval time.
ensINT = ens$Interval[2:length(ens$Interval)]
meanINT = mean(ensINT)
medianINT = median(ensINT)
stdINT = sd(ensINT)
# Compute interval time mean and variance.
variance = (stdINT)^2
# R code create histogram of interval time.
hist(ens$Interval, xlab = 'interval, years', main = 'time between elNino events')
# Histogram with poisson prediction superposed.
lambda = meanINT
ml = max (ensINT)
P = data.frame(Events = 1:ml, P = length(ensINT) *dpois(1:ml, lambda))
ensINTdf = data.frame(Interval = c(ensINT))
ggplot(data = ensINTdf, aes(Interval))+
geom_histogram()+
geom_point(data = P, aes (x=Events, y=P))
# Scatterplot of adjacent interval times.
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN)
df = data.frame(shiftedIntervals = shiftedIntervals, ensINT = ensINT)
ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
# Interval time (observed and shifted) sequence.  The x axis should be index, not year.
intTS = ts(ensINT)
shiftedIntervals =  c(ensINT[2:length(ensINT)], NaN, NaN, NaN)
shiftTS = ts(shiftedIntervals)
#df = data.frame(shiftedIntervals = shiftTS, ensINT = intTS)
#ggplot (df)+geom_point(aes(x = shiftedIntervals, y = ensINT)) + labs(x = 'i+1', y = 'i')
ts.plot(intTS, shiftTS,xlab = "index " ,ylab = 'interval', col = c('red','blue') )
# Compute observed transition frequency and probability matrices for El Nino severity index. Do not hand count!  Use R.  createSequenceMatrix will help tremendously {markovchain}.
P = createSequenceMatrix(ens$Strength , toRowProbs = FALSE )
# Expected transition probability matrix
markovStrength = new('markovchain', states = c('0','1'), transitionMatrix = P , name = 'Strength of El Nino')
#Chi-square test for null hypothesis
pM = t(matrix(rep(pr,2), nrow = 2))
pM[1,1:2] = pM [1,1:2] *( 100- percentStrong)/100
pM[2,1:2] = pM [2,1:2] *percentStrong/100
xsq = chisq.test(x= as.vector(P), p= as.vector(pM), rescale.p = TRUE)
xsq
?xsq
?chisq.test
xsq
